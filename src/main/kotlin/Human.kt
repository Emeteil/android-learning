import java.util.concurrent.locks.ReentrantLock
// –º—å—é—Ç–µ–∫—Å –∏–∑ java (kotlinx.coroutines.sync.Mutex –¥–ª—è –∫–æ—Ä—É—Ç–∏–Ω –∫–æ—Ç–ª–∏–Ω–∞, —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å java –ø–æ—Ç–æ–∫–∏. –ö–∞–∫ –±—É–¥—Ç–æ —Ç–∞–∫ –ø—Ä–∏–≤—ã—á–Ω–µ–π, –±–µ–∑ suspend —Ñ—É–Ω–∫—Ü–∏–π)

import kotlin.random.Random

open class Human(fullName: String, age: Int, groupNumber: Int, startSpeed: Float)
{
    val mutex: ReentrantLock = ReentrantLock() // –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—É–¥–µ—Ç —Å–≤–æ–π –º—å—é—Ç–µ–∫—Å

    var fullName: String = ""
        set(value)
        {
            mutex.lock() // –¥–ª—è —Å–µ—Ç—Ç–µ—Ä–æ–≤ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—å—é—Ç–µ–∫—Å. –î–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π - –æ–¥–∏–Ω –º—å—é—Ç–µ–∫—Å (—Ä–∞–Ω—å—à–µ —è –¥–æ–±–∞–≤–ª—è–ª –º—å—é—Ç–µ–∫—Å –ª–æ–∫ –≤ –º–µ—Ç–æ–¥—ã, –Ω–æ —Ç–∞–∫ –∫–∞–∫ –±—É–¥—Ç–æ —É–¥–æ–±–Ω–µ–µ)
            try // try except –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—å—é—Ç–µ–∫ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            {
                field = value
            }
            finally
            {
                mutex.unlock()
            }
        }
    var age: Int = 0
        set(value) // —Ç—É—Ç —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å–∞—Å—å, –¥–ª—è —á–∏—Ç–∞–π–º–æ—Å—Ç–∏
        {
            mutex.lock()
            try { if (value > 0) field = value }
            finally { mutex.unlock() }
        }
    var groupNumber: Int = 0
        set(value)
        {
            mutex.lock()
            try { if (value > 0) field = value }
            finally { mutex.unlock() }
        }

    var currentSpeed: Float = 0.0f
        get() { return field }
        protected set(value)
        {
            mutex.lock()
            try { field = value }
            finally { mutex.unlock() }
        }
    var currentPosition: Point = Point(0f, 0f)
        get() { return field }
        protected set(value)
        {
            mutex.lock()
            try { field = value }
            finally { mutex.unlock() }
        }
    var currentMoveVector2: Vector2 = Vector2(0f, 0f)
        get() { return field }
        protected set(value)
        {
            mutex.lock()
            try { field = value }
            finally { mutex.unlock() }
        }

    init
    {
        this.fullName = fullName
        if (age > 0)
            this.age = age
        this.groupNumber = groupNumber
        if (groupNumber > 0)
            this.groupNumber = groupNumber

        this.currentSpeed = startSpeed
    }

    open fun RandomizeMoveVector()
    {
        // —Ç—É—Ç –º—å—é—Ç–µ–∫—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —è –µ–≥–æ —É–±—Ä–∞–ª
        currentMoveVector2.x = Random.nextFloat() * 2 - 1
        currentMoveVector2.y = Random.nextFloat() * 2 - 1
    }

    fun Move()
    {
        // —Ç—É—Ç —Ç–æ–∂–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω–º, —è —Å–¥–µ–ª–∞–ª –∫–ª–∞—Å—Å—ã Point –∏ Vector2 –ø–æ—Ç–æ–∫–æ–∑–∞—â–∏—â—ë–Ω–Ω—ã–º–∏!
        currentPosition.AddVector2(currentMoveVector2, currentSpeed)
    }

    // TODO: –Ω–µ –∑–∞–±—ã—Ç—å —É–±—Ä–∞—Ç—å iteration –≤ –±—É–¥—É—â–µ–º
    open fun Print(iteration: Int? = null) // —Å—á—ë—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤. Int? - nullable reference types(–Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ kotlin, –Ω–æ C# —Ç–æ—á–Ω–æ —Ç–∞–∫)
    {
        println("üèÉ${fullName}${if (iteration != null) " ${iteration}" else ""}: ${currentPosition.ToString()}")
    }
}